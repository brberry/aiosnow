[tool.poetry]
name = "aiosnow"
version = "0.6.0"
description = "Asynchronous Python ServiceNow library"
authors = ["Robert Wikman <rbw@vault13.org>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/rbw/aiosnow"
classifiers = [
    "Development Status :: 4 - Beta",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Software Development :: Libraries"
]

[tool.poetry.dependencies]
python = "^3.7"
aiohttp = "^3.6.2"
marshmallow = "^3.6.1"

[tool.poetry.dev-dependencies]
twine = "^1.13"
mypy = "^0.770"
isort = "^5.1.4"
sphinx = "^2.1.1"
sphinxcontrib-napoleon = "^0.7"
pytest = "^4.4.0"
pytest-cov = "^2.7.1"
pytest-asyncio = "^0.10.0"
pytest-aiohttp = "^0.3.0"
autoflake = "^1.3"
codecov = "^2.0.15"
docutils = { version = "0.15" }
black = { version = "^19.3b0", allow-prereleases = true }

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_untyped_defs = true
explicit_package_bases = true
no_implicit_reexport = false
pretty = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
show_absolute_path = true
# Exclude only affects file discovery, still need overrides config below with ignore_errors=true
exclude = [
    "docs/*",
    "examples/*",
    "tests/*",
    "aiosnow/models/*",
    "aiosnow/query/*",
    "aiosnow/request/*",
    "aiosnow/client.py"
]

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "examples.*",
    "aiosnow.models.*",
    "aiosnow.query.*",
    "aiosnow.request.*",
    "aiosnow.client"
]
ignore_errors = true


[tool.ruff]
src = ["aiosnow/"]
force-exclude = true
line-length = 120
show-fixes = true
exclude = [
    "tests",
    "docs",
    "examples",
    "aiosnow/models",
    "aiosnow/query",
    "aiosnow/request",
    "aiosnow/client.py",
    "aiosnow/config.py"
]

[tool.ruff.lint]
extend-select = ["A","B", "C4", "E", "F", "I", "PGH004", "PTH", "Q", "RET", "S", "SIM", "TCH", "UP", "W", "YTT"]
# A002: Argument `xxxx` is shadowing a Python builtin
# S104: Possible binding to all interfaces (totally bogus - it sees a string '0.0.0.0' and thinks
#       it's an IP address)
# SIM102: Use a single `if` statement instead of nested `if` statements (their suggestions make for
#         very unreadable code)
ignore = ["A002", "S104", "SIM102"]
pydocstyle = { convention = 'google' }

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # xxxx imported but unused; consider removing, adding to `__all__`, or using a redundant alias
]

[tool.ruff.lint.isort]
known-local-folder = ["aiosnow"]
